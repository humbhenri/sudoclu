(ns sudoclu.test.core
  (:use [sudoclu.core])
  (:use [clojure.test]))

(deftest next-empty-test
  (is (= (next-empty (from-str
       "5 3 0 0 7 0 0 0 0
        6 0 0 1 9 5 0 0 0
        0 9 8 0 0 0 0 6 0
        8 0 0 0 6 0 0 0 3
        4 0 0 8 0 3 0 0 1
        7 0 0 0 2 0 0 0 6
        0 6 0 0 0 0 2 8 0
        0 0 0 4 1 9 0 0 5
        0 0 0 0 8 0 0 7 9")) [0 2])))

(deftest can-put-test
  (let [board (from-str
       "5 3 0 0 7 0 0 0 0
        6 0 0 1 9 5 0 0 0
        0 9 8 0 0 0 0 6 0
        8 0 0 0 6 0 0 0 3
        4 0 0 8 0 3 0 0 1
        7 0 0 0 2 0 0 0 6
        0 6 0 0 0 0 2 8 0
        0 0 0 4 1 9 0 0 5
        0 0 0 0 8 0 0 7 9")]
    (is (and (can-put? board [0 2] 4)
             (not (can-put? board [0 2] 5))
             (can-put? board [6 3] 5)))))

(deftest solve-test
  (is (= (solve
      (from-str "5 3 4 6 7 8 9 1 0
        0 7 0 1 9 5 3 4 8
        1 9 8 3 4 2 5 6 7
        8 5 9 7 6 1 4 2 3
        4 0 6 8 5 3 7 9 1
        7 1 3 9 2 4 8 5 6
        0 6 1 5 3 7 2 8 4
        2 8 7 4 1 9 6 3 5
        3 4 5 2 8 6 1 7 9"))

      (from-str "5 3 4 6 7 8 9 1 2
        6 7 2 1 9 5 3 4 8
        1 9 8 3 4 2 5 6 7
        8 5 9 7 6 1 4 2 3
        4 2 6 8 5 3 7 9 1
        7 1 3 9 2 4 8 5 6
        9 6 1 5 3 7 2 8 4
        2 8 7 4 1 9 6 3 5
        3 4 5 2 8 6 1 7 9"))))


(deftest solve-test2
  (is (= (solve (from-str
"0	6	7	1	5	2	3	8	9
8	0	0	9	3	7	6	4	2
0	9	0	6	8	4	7	1	5
2	5	1	7	4	3	9	6	8
6	7	3	8	2	9	1	5	4
9	4	0	0	1	6	2	3	7
7	3	0	4	6	8	0	2	1
5	8	6	2	7	1	4	9	3
1	2	0	3	9	5	8	7	6"))

(from-str
"4	6	7	1	5	2	3	8	9
8	1	5	9	3	7	6	4	2
3	9	2	6	8	4	7	1	5
2	5	1	7	4	3	9	6	8
6	7	3	8	2	9	1	5	4
9	4	8	5	1	6	2	3	7
7	3	9	4	6	8	5	2	1
5	8	6	2	7	1	4	9	3
1	2	4	3	9	5	8	7	6"))))


(deftest sample-1 (is (= (solve (from-str
"0 0 0 1 0 0 7 0 2
0 3 0 9 5 0 0 0 0
0 0 1 0 0 2 0 0 3
5 9 0 0 0 0 3 0 1
0 2 0 0 0 0 0 7 0
7 0 3 0 0 0 0 9 8
8 0 0 2 0 0 1 0 0
0 0 0 0 8 5 0 6 0
6 0 5 0 0 9 0 0 0"))

                         (from-str
"9 5 6 1 3 8 7 4 2
2 3 7 9 5 4 8 1 6
4 8 1 6 7 2 9 5 3
5 9 4 8 6 7 3 2 1
1 2 8 5 9 3 6 7 4
7 6 3 4 2 1 5 9 8
8 7 9 2 4 6 1 3 5
3 1 2 7 8 5 4 6 9
6 4 5 3 1 9 2 8 7"))))
